__CLEARSCOPE
.mscr_init_userland __LABEL_SET
RET     ;Userland init end

.mscr_function_putchar_params_1 __LABEL_SET     ; [Function (in func: putchar)]
  SETREG G varCount(scope=putchar)      ; [Function (in func: putchar)]
  ADD G H H     ; [Function (in func: putchar)]
  __SCOPE {var: char, reg: 0}   ; [Function (in func: putchar)]
  PUSH var(char,r)      ; [FunctionCall (in func: putchar)]
  mov var(REG_A,r) A    ; [FunctionCall (in func: putchar)]
  __CLEARSCOPE  ; [FunctionCall (in func: putchar)]
  CALL .mscr_function__reg_assign_params_2      ; [FunctionCall (in func: putchar)]
  __CLEARSCOPE  ; [FunctionCall (in func: putchar)]
  PUSH [[vga_mem + cursorPositionX + (cursorPositionY * 98)]]   ; [FunctionCall (in func: putchar)]
  mov var(REG_B,r) A    ; [FunctionCall (in func: putchar)]
  __CLEARSCOPE  ; [FunctionCall (in func: putchar)]
  CALL .mscr_function__reg_assign_params_2      ; [FunctionCall (in func: putchar)]
  __CLEARSCOPE  ; [FunctionCall (in func: putchar)]
  MEMW A B      ; [Body (in func: putchar)]
  SETREG G varCount(scope=)     ; [Function (in func: )]
  SUB H H G     ; [Function (in func: )]
  RET   ; [Function (in func: )]
  FAULT 0x0     ; [Function (in func: )]

.mscr_function_alphabet_params_0 __LABEL_SET    ; [Function (in func: alphabet)]
  SETREG G varCount(scope=alphabet)     ; [Function (in func: alphabet)]
  ADD G H H     ; [Function (in func: alphabet)]
  mov [65] var(curChar,w)       ; [Variable (in func: alphabet)]
  .mscr_while_start__23_5_367 JMPEZ .mscr_while_end__23_5_367 [[curChar <= 90]]         ; [WhileLoop (in func: alphabet)
]
    mov var(curChar,r) A        ; [FunctionCall (in func: alphabet)]
    __CLEARSCOPE        ; [FunctionCall (in func: alphabet)]
    CALL .mscr_function_putchar_params_1        ; [FunctionCall (in func: alphabet)]
    __CLEARSCOPE        ; [FunctionCall (in func: alphabet)]
    mov [[curChar + (1)]] var(curChar,w)        ; [Assignment (in func: alphabet)]
    mov [[cursorPositionX + (1)]] var(cursorPositionX,w)        ; [Assignment (in func: alphabet)]
    jmp .mscr_while_start__23_5_367     ; [WhileLoop (in func: alphabet)]
    .mscr_while_end__23_5_367 NOOP      ; [WhileLoop (in func: alphabet)]

  SETREG G varCount(scope=)     ; [Function (in func: )]
  SUB H H G     ; [Function (in func: )]
  RET   ; [Function (in func: )]
  FAULT 0x0     ; [Function (in func: )]

.mscr_function_testAdd_params_6 __LABEL_SET     ; [Function (in func: testAdd)]
  SETREG G varCount(scope=testAdd)      ; [Function (in func: testAdd)]
  ADD G H H     ; [Function (in func: testAdd)]
  __SCOPE {var: a, reg: 0}      ; [Function (in func: testAdd)]
  POP var(b,w)  ; [Function (in func: testAdd)]
  POP var(c,w)  ; [Function (in func: testAdd)]
  POP var(d,w)  ; [Function (in func: testAdd)]
  POP var(e,w)  ; [Function (in func: testAdd)]
  POP var(f,w)  ; [Function (in func: testAdd)]
  mov [[a+b+c+d+e+f]] A         ; [Body (in func: testAdd)]
  SETREG G varCount(scope=testAdd)      ; [Body (in func: testAdd)]
  SUB H H G     ; [Body (in func: testAdd)]
  RET   ; [Body (in func: testAdd)]
  mov A A       ; [Body (in func: testAdd)]
  FAULT 0x0     ; [Function (in func: )]

.mscr_function_main_params_2 __LABEL_SET        ; [Function (in func: main)]
  SETREG G varCount(scope=main)         ; [Function (in func: main)]
  ADD G H H     ; [Function (in func: main)]
  __SCOPE {var: argc, reg: 0}   ; [Function (in func: main)]
  POP var(argp,w)       ; [Function (in func: main)]
  JMPEZ .mscr_cond_else__40_5_620 [[argc != 0]]         ; [IfCondition (in func: main)]
    HALT        ; [BodyIf (in func: main)]
    mov [1] A   ; [BodyIf (in func: main)]
    SETREG G varCount(scope=main)       ; [BodyIf (in func: main)]
    SUB H H G   ; [BodyIf (in func: main)]
    RET         ; [BodyIf (in func: main)]
    jmp .mscr_cond_end__40_5_620        ; [BodyElse (in func: main)]
    .mscr_cond_else__40_5_620 __LABEL_SET       ; [BodyElse (in func: main)]
    PUSH [6]    ; [FunctionCall (in func: main)]
    PUSH [5]    ; [FunctionCall (in func: main)]
    PUSH [4]    ; [FunctionCall (in func: main)]
    PUSH [3]    ; [FunctionCall (in func: main)]
    PUSH [2]    ; [FunctionCall (in func: main)]
    mov [1] A   ; [FunctionCall (in func: main)]
    __CLEARSCOPE        ; [FunctionCall (in func: main)]
    CALL .mscr_function_testAdd_params_6        ; [FunctionCall (in func: main)]
    __CLEARSCOPE        ; [FunctionCall (in func: main)]
    .mscr_cond_end__40_5_620 NOOP       ; [IfCondition (in func: main)]

  mov [_d(32902)] var(vga_mem,w)        ; [Assignment (in func: main)]
  .mscr_while_start__51_5_803 JMPEZ .mscr_while_end__51_5_803 [[iteration < 5]]         ; [WhileLoop (in func: main)]
    mov [[iteration + (1)]] var(iteration,w)    ; [Assignment (in func: main)]
    __CLEARSCOPE        ; [FunctionCall (in func: main)]
    CALL .mscr_function_alphabet_params_0       ; [FunctionCall (in func: main)]
    __CLEARSCOPE        ; [FunctionCall (in func: main)]
    mov [[cursorPositionY + (1)]] var(cursorPositionY,w)        ; [Assignment (in func: main)]
    mov [0] var(cursorPositionX,w)      ; [Assignment (in func: main)]
    jmp .mscr_while_start__51_5_803     ; [WhileLoop (in func: main)]
    .mscr_while_end__51_5_803 NOOP      ; [WhileLoop (in func: main)]

  HALT  ; [Body (in func: main)]
  mov [0] A     ; [Body (in func: main)]
  SETREG G varCount(scope=main)         ; [Body (in func: main)]
  SUB H H G     ; [Body (in func: main)]
  RET   ; [Body (in func: main)]
  FAULT 0x0     ; [Function (in func: )]
